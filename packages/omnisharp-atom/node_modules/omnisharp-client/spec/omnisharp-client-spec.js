var chai_1 = require('chai');
var enums_1 = require("../lib/enums");
var path_1 = require("path");
var client_v2_1 = require("../lib/clients/client-v2");
var _ = require("lodash");
describe("Omnisharp Server", function () {
    it("must construct", function () {
        new client_v2_1.ClientV2({
            projectPath: process.cwd()
        });
    });
    it("must construct with a specific driver", function () {
        new client_v2_1.ClientV2({
            driver: enums_1.Driver.Stdio,
            projectPath: process.cwd()
        });
    });
    describe('state', function () {
        this.timeout(20000);
        var server;
        before(function (done) {
            server = new client_v2_1.ClientV2({
                driver: enums_1.Driver.Stdio,
                projectPath: process.cwd()
            });
            server.connect();
            var sub = server.state.subscribe(function (state) {
                if (state === enums_1.DriverState.Connected) {
                    sub.dispose();
                    done();
                }
            });
        });
        it("must respond to all requests", function (done) {
            var count = 4;
            server.observeCheckalivestatus.subscribe(function (data) {
                count--;
                if (!count)
                    done();
            });
            server.checkalivestatus();
            server.checkalivestatus();
            server.checkalivestatus();
            server.checkalivestatus();
        });
        it("must give status", function (done) {
            var sub = server.status.delay(1).subscribe(function (status) {
                sub.dispose();
                done();
            });
            server.checkalivestatus();
            server.checkalivestatus();
        });
    });
    describe("configuration", function () {
        it('should call with given omnisharp parameters', function (done) {
            var server = new client_v2_1.ClientV2({
                driver: enums_1.Driver.Stdio,
                projectPath: path_1.resolve(__dirname, '../roslyn/'),
                logger: {
                    log: function (message) {
                        if (_.startsWith(message, "Arguments: ")) {
                            chai_1.expect(message).to.contain('--Dnx:Alias=notdefault');
                            done();
                        }
                    },
                    error: function (message) { }
                },
                omnisharp: {
                    dnx: { alias: 'notdefault' }
                }
            });
            server.connect({});
        });
        it('should call with given omnisharp parameters', function (done) {
            var server = new client_v2_1.ClientV2({
                driver: enums_1.Driver.Stdio,
                projectPath: path_1.resolve(__dirname, '../roslyn/'),
                logger: {
                    log: function (message) {
                        if (_.startsWith(message, "Arguments: ")) {
                            chai_1.expect(message).to.contain('--Dnx:Alias=beta4');
                            chai_1.expect(message).to.contain('--FormattingOptions:NewLine=blah');
                            done();
                        }
                    },
                    error: function (message) { }
                },
                omnisharp: {
                    formattingOptions: { newLine: "blah" },
                    dnx: { alias: 'beta4' }
                }
            });
            server.connect({});
        });
    });
});
