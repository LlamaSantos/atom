(function() {
  var Chains, Element, Promise, SlnFile, debug, fs, newline, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  Promise = require("bluebird");

  Chains = require("bluebird-chains");

  util = require("util");

  debug = require("debug")("vsproj:slnfile");

  Element = require("./element");

  newline = "\n";

  SlnFile = (function(_super) {
    __extends(SlnFile, _super);

    function SlnFile() {
      this.parseLine = __bind(this.parseLine, this);
      this.processElement = __bind(this.processElement, this);
      this.render = __bind(this.render, this);
      this.save = __bind(this.save, this);
      this.open = __bind(this.open, this);
      return SlnFile.__super__.constructor.apply(this, arguments);
    }

    SlnFile.prototype.open = function(file) {
      this.file = file;
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.list = [_this];
          return fs.readFile(_this.file, "utf8", function(err, fileData) {
            var a, l, line, lines, _i, _len;
            _this.fileData = fileData;
            if (err != null) {
              throw err;
            }
            lines = _this.fileData.split(newline);
            a = new Chains;
            for (_i = 0, _len = lines.length; _i < _len; _i++) {
              line = lines[_i];
              l = line.replace(/\t/g, '').trim();
              if (l !== "" && l.indexOf("#") !== 0 && l.indexOf("Microsoft Visual Studio Solution File") !== 0) {
                a.push(_this.render, [l]);
              }
            }
            debug("parseing lines");
            return a.last().then(function() {
              return resolve(_this.list[0]);
            }, reject);
          });
        };
      })(this));
    };

    SlnFile.prototype.save = function(path) {
      if (path == null) {
        path = this.file;
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var lines;
          lines = "" + newline;
          lines += "Microsoft Visual Studio Solution File, Format Version 12.00" + newline;
          lines += "# Visual Studio 2013" + newline;
          lines += _this.assembleLine(_this);
          return fs.writeFile(path, lines, function(err) {
            if (err != null) {
              throw err;
            }
            return resolve(lines);
          });
        };
      })(this));
    };

    SlnFile.prototype.assembleLine = function(e, indent) {
      var ele, i, line, p, _i, _j, _len, _len1, _ref, _ref1;
      if (indent == null) {
        indent = -1;
      }
      line = this.createTabs(indent);
      if (e.name != null) {
        line += "" + e.name;
      }
      if (e.hasArgs) {
        line += "(" + e.args + ")";
      }
      if (e.hasProperties) {
        line += " = ";
        _ref = e.properties;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          line += "" + p + ", ";
        }
        line = line.substring(0, line.lastIndexOf(','));
      }
      line += newline;
      if (e.elements != null) {
        _ref1 = e.elements;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          ele = _ref1[_j];
          i = indent + 1;
          line += this.assembleLine(ele, i);
        }
      }
      if (e.isGroup) {
        line += this.createTabs(indent);
        line += "End" + e.name + newline;
      }
      return line;
    };

    SlnFile.prototype.createTabs = function(indent) {
      var ii, line;
      line = "";
      if (indent > 0) {
        ii = 0;
        while (ii < indent) {
          line += "\t";
          ii++;
        }
      }
      return line;
    };

    SlnFile.prototype.render = function(line) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.parseLine(line).then(_this.processElement).then(resolve, reject)["catch"](function(e) {
            throw e;
          });
        };
      })(this));
    };

    SlnFile.prototype.processElement = function(e) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var l;
          if (e.isGroupClose && _this.list.length > 1) {
            l = _this.list.pop();
            _this.list[_this.list.length - 1].push(l);
          } else if (e.isGroup) {
            _this.list.push(e);
          } else if (!e.isGroupClose && !e.isGroup) {
            _this.list[_this.list.length - 1].push(e);
          }
          return resolve();
        };
      })(this));
    };

    SlnFile.prototype.parseLine = function(line) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var args, c, d, e, name, p, props, _i, _len;
          e = new Element();
          name = line;
          if (name.indexOf(" = ") > -1) {
            d = name.split(" = ");
            name = d[0];
            props = d[1].split(", ");
            e.properties = [];
            for (_i = 0, _len = props.length; _i < _len; _i++) {
              p = props[_i];
              e.properties.push(_this.cleanString(p));
            }
            e.hasProperties = true;
          }
          if (name.indexOf("(") > -1 && name.indexOf(")") > -1) {
            c = name.split("(");
            name = c[0];
            args = c[1].split(")")[0];
            if (args != null) {
              e.args = _this.cleanString(args);
            }
            e.hasArgs = true;
          }
          if (_this.fileData.indexOf("End" + name) > -1) {
            e.isGroup = true;
          } else if (name.indexOf("End") === 0) {
            e.isGroupClose = true;
          }
          e.name = _this.cleanString(name);
          return resolve(e);
        };
      })(this));
    };

    SlnFile.prototype.quoteString = function(str) {
      return "\"" + str + "\"";
    };

    SlnFile.prototype.cleanString = function(str) {
      return str;
    };

    return SlnFile;

  })(Element);

  module.exports = SlnFile;

}).call(this);
