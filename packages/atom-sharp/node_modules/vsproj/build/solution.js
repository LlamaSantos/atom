(function() {
  var Element, Project, Promise, Solution, cleanPath, cleanString, debug, elementMap, elementProcessor, fs, map, path, projectDataMap, projectsMap, quoteString, slnfile, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require("fs");

  Promise = require("bluebird");

  util = require("util");

  debug = require("debug")("vsproj:solution");

  Element = require("./element");

  slnfile = require("./slnfile");

  map = require("coffeemapper");

  path = require("path");

  Project = require("./project");

  elementProcessor = {
    newItem: function() {
      return new Element;
    },
    setValue: function(item, key, value) {
      return item[key] = value;
    },
    getValue: function(item, key) {
      return item[key];
    }
  };

  quoteString = function(str) {
    return "\"" + str + "\"";
  };

  cleanString = function(str) {
    return str.replace(/"/g, '').trim();
  };

  cleanPath = function(str) {
    if (path.sep === '/') {
      return str.replace(/\\/g, '/');
    }
    return str;
  };

  projectDataMap = {
    read: {
      "name": function(src, resolve, reject) {
        debug("projectDataMap.read.name");
        return resolve(cleanString(src.properties[0]));
      },
      "path": function(src, resolve, reject) {
        debug("projectDataMap.read.path", src.properties[1]);
        return resolve(cleanString(src.properties[1]));
      },
      "id": function(src, resolve, reject) {
        debug("projectDataMap.read.id");
        return resolve(cleanString(src.properties[2]));
      },
      "templateid": function(src, resolve, reject) {
        return resolve(src.args);
      },
      "innerElements": function(src, resolve, reject) {
        return resolve(src.elements);
      }
    },
    write: {
      "name": function(src, resolve, reject) {
        return resolve("Project");
      },
      "properties": function(src, resolve, reject) {
        debug("projectDataMap.write.properties", src);
        return resolve([quoteString(src.name), quoteString(src.path), quoteString(src.id)]);
      },
      "hasProperties": function(src, resolve, reject) {
        return resolve(true);
      },
      "hasArgs": function(src, resolve, reject) {
        return resolve(src.templateid != null);
      },
      "args": function(src, resolve, reject) {
        return resolve(src.templateid);
      },
      "isGroup": function(src, resolve, reject) {
        return resolve(true);
      },
      "elements": function(src, resolve, reject) {
        return resolve(src.innerElements);
      }
    }
  };

  debug("set element map");

  projectsMap = {
    read: {
      "Projects": function(src, resolve, reject) {
        var func, output, p, promises, _i, _len, _ref;
        debug("projectsMap.read.Projects", src);
        output = [];
        promises = [];
        func = function(proj) {
          return new Promise(function(resolve, reject) {
            var filePath, newProj;
            newProj = new Project();
            filePath = path.resolve(src.file, "../" + (cleanPath(proj.path)));
            debug("loading project", filePath);
            return newProj.open(filePath).then(function() {
              newProj.name = proj.name;
              return resolve(newProj);
            }, function() {
              debug("unable to load project", proj, src);
              return resolve();
            });
          });
        };
        _ref = src.ProjectData;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          promises.push(func(p));
        }
        return Promise.all(promises).then(resolve, reject);
      }
    }
  };

  elementMap = {
    read: {
      "VisualStudioVersion": function(src, resolve, reject) {
        var element;
        debug("elementMap.read.VisualStudioVersion");
        element = src.getElement("VisualStudioVersion");
        if (element != null) {
          return resolve(element.properties[0]);
        }
        return resolve("12.0.30501.0");
      },
      "MinimumVisualStudioVersion": function(src, resolve, reject) {
        var element;
        debug("elementMap.read.MinimumVisualStudioVersion");
        element = src.getElement("MinimumVisualStudioVersion");
        if (element != null) {
          return resolve(element.properties[0]);
        }
        return resolve("10.0.40219.1");
      },
      "ProjectData": function(src, resolve, reject) {
        debug("elementMap.read.Projects");
        return src.getElementsByName("Project").then(function(projects) {
          debug("elementMap.read.Projects.getElementsByName.finish");
          return map(projects, projectDataMap.read).then(function(data) {
            debug("elementMap.read.Projects.map.finish");
            return resolve(data);
          }, reject);
        }, reject);
      },
      "Global": function(src, resolve, reject) {
        debug("Global start");
        return src.getElementsByName("Global").then(resolve, reject);
      }
    },
    write: {
      "elements": function(src, resolve, reject) {
        var data;
        debug("elementMap.write.elements", src.VisualStudioVersion, src.MinimumVisualStudioVersion);
        data = [];
        data.push(new Element({
          name: "VisualStudioVersion",
          properties: [src.VisualStudioVersion],
          hasProperties: true
        }));
        data.push(new Element({
          name: "MinimumVisualStudioVersion",
          properties: [src.MinimumVisualStudioVersion],
          hasProperties: true
        }));
        return map(src.ProjectData, projectDataMap.write, elementProcessor).then(function(result) {
          var r, _i, _len;
          debug("elementMap.write.elements.map.Projects");
          for (_i = 0, _len = result.length; _i < _len; _i++) {
            r = result[_i];
            data.push(r);
          }
          data = data.concat(src.Global);
          debug("elementmap.write.data");
          return resolve(data);
        }, reject);
      }
    }
  };

  Solution = (function() {
    function Solution() {
      this.save = __bind(this.save, this);
      this.open = __bind(this.open, this);
    }

    Solution.prototype.open = function(file) {
      this.file = file;
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.slnfile = new slnfile();
          debug("slnfile start", _this.slnfile);
          return _this.slnfile.open(_this.file).then(function() {
            debug("slnfile opened - starting map");
            _this.name = path.basename(_this.file);
            return map(_this.slnfile, elementMap.read, null, _this).then(function() {
              return map(_this, projectsMap.read, null, _this).then(function() {
                return resolve(_this);
              }, reject);
            });
          }, reject);
        };
      })(this));
    };

    Solution.prototype.save = function(path) {
      if (path == null) {
        path = this.file;
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (_this.slnfile == null) {
            throw "has not opened an existing sln";
          }
          return map(_this, elementMap.write, elementProcessor, _this.slnfile).then(function() {
            debug("map complete - starting to save", path, _this.slnfile.elements);
            return _this.slnfile.save(path).then(function(file) {
              debug("save complete");
              return resolve(file);
            }, reject);
          });
        };
      })(this));
    };

    return Solution;

  })();

  module.exports = Solution;

}).call(this);
