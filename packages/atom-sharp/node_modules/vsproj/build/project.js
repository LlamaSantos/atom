(function() {
  var Project, Promise, debug, elementMap, fs, map, parser, projectMap, util, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require("fs");

  util = require("util");

  xml2js = require("xml2js");

  parser = new xml2js.Parser();

  map = require("coffeemapper");

  debug = require("debug")("vsproj:project");

  Promise = require("bluebird");

  elementMap = {
    path: function(src, res, rej) {
      debug("elementMap.name");
      if (src["$"] != null) {
        if (src["$"].Include != null) {
          res(src["$"].Include);
        }
      }
      return rej();
    },
    dependent: function(src, res, rej) {
      debug("elementMap.dependent");
      if (src.DependentUpon != null) {
        res(src.DependentUpon[0]);
      }
      return rej();
    },
    subtype: function(src, res, rej) {
      debug("elementMap.subtype");
      if (src.SubType != null) {
        res(src.SubType[0]);
      }
      return rej();
    }
  };

  projectMap = {
    "References": function(src, res, rej) {
      var e, refMap, refs, _i, _len, _ref;
      debug("projectMap.References", refMap = {
        name: function(src, resolve, reject) {
          debug("projectMap.refMap.name");
          return resolve(src["$"].Include);
        },
        path: function(src, resolve, reject) {
          var value;
          debug("projectMap.refMap.path");
          if (src.HintPath != null) {
            value = src.HintPath[0];
            resolve(value);
          }
          return reject();
        },
        "private": function(src, resolve, reject) {
          debug("projectMap.refMap.private");
          if (src.Private != null) {
            resolve(src.Private[0] === 'True');
          }
          return reject();
        }
      });
      refs = [];
      _ref = src.Project.ItemGroup;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.Reference != null) {
          refs = refs.concat(e.Reference);
        }
      }
      debug("projectMap.References.startmap");
      return map(refs, refMap).then(res, rej);
    },
    "Content": function(src, resolve, reject) {
      var e, refs, _i, _len, _ref;
      debug("projectMap.Content");
      refs = [];
      _ref = src.Project.ItemGroup;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.Content != null) {
          refs = refs.concat(e.Content);
        }
      }
      return map(refs, elementMap).then(resolve, reject);
    },
    "Compile": function(src, resolve, reject) {
      var e, refs, _i, _len, _ref;
      debug("projectMap.Compile");
      refs = [];
      _ref = src.Project.ItemGroup;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.Compile != null) {
          refs = refs.concat(e.Compile);
        }
      }
      return map(refs, elementMap).then(resolve, reject);
    },
    "Folder": function(src, resolve, reject) {
      var e, refs, _i, _len, _ref;
      debug("projectMap.Folder");
      refs = [];
      _ref = src.Project.ItemGroup;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.Folder != null) {
          refs = refs.concat(e.Folder);
        }
      }
      return map(refs, elementMap).then(resolve, reject);
    }
  };

  Project = (function() {
    function Project() {
      this.open = __bind(this.open, this);
    }

    Project.prototype.open = function(file) {
      this.file = file;
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return fs.readFile(_this.file, function(err, data) {
            if (err != null) {
              debug("read file err", err, _this.file);
              return reject(err);
            }
            return parser.parseString(data, function(err, xml) {
              _this.xml = xml;
              if (err != null) {
                debug("xml err", err, _this.file);
                return reject(err);
              }
              return map(_this.xml, projectMap, void 0, _this).then(function() {
                debug("Project", _this);
                return resolve(_this);
              }, reject);
            });
          });
        };
      })(this));
    };

    return Project;

  })();

  module.exports = Project;


  /*
  var fs = require('fs'),
      xml2js = require('xml2js');
  
  var parser = new xml2js.Parser();
  fs.readFile(__dirname + '/foo.xml', function(err, data) {
      parser.parseString(data, function (err, result) {
          console.dir(result);
          console.log('Done');
      });
  });
   */

}).call(this);
